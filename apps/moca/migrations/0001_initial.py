# Generated by Django 2.1.10 on 2019-09-15 20:14

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

  initial = True

  dependencies = [
    ('auth', '0009_alter_user_last_name_max_length'),
  ]

  operations = [
    migrations.CreateModel(
      name='User',
      fields=[
        ('id',
         models.AutoField(auto_created=True, primary_key=True, serialize=False,
                          verbose_name='ID')),
        ('password', models.CharField(max_length=128, verbose_name='password')),
        ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
        ('is_superuser',
         models.BooleanField(
           default=False,
           help_text=
           'Designates that this user has all permissions without explicitly assigning them.',
           verbose_name='superuser status')),
        ('first_name', models.CharField(blank=True, max_length=50, null=True)),
        ('last_name', models.CharField(blank=True, max_length=50, null=True)),
        ('gender',
         models.CharField(blank=True,
                          choices=[('F', 'Female'), ('M', 'Male')],
                          max_length=2,
                          null=True)),
        ('date_of_birth', models.DateField(blank=True, null=True)),
        ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
        ('type',
         models.CharField(choices=[('PA', 'Patient'), ('PT', 'Physical Therapist'),
                                   ('AG', 'Agent'), ('AD', 'Admin')],
                          default='AG',
                          max_length=2)),
        ('email', models.EmailField(max_length=254, null=True, unique=True)),
        ('is_staff',
         models.BooleanField(default=False,
                             help_text='Designates whether the user can log into this site.',
                             verbose_name='staff status')),
        ('is_active',
         models.BooleanField(
           default=True,
           help_text=
           'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
           verbose_name='active')),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='Address',
      fields=[
        ('id',
         models.AutoField(auto_created=True, primary_key=True, serialize=False,
                          verbose_name='ID')),
        ('name', models.CharField(max_length=50)),
        ('text', models.CharField(max_length=300)),
        ('primary', models.BooleanField()),
        ('apartment', models.CharField(max_length=50)),
        ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
      ],
    ),
    migrations.CreateModel(
      name='AttachmentMessage',
      fields=[
        ('id',
         models.AutoField(auto_created=True, primary_key=True, serialize=False,
                          verbose_name='ID')),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('url', models.FileField(upload_to='')),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='Conversation',
      fields=[
        ('id',
         models.AutoField(auto_created=True, primary_key=True, serialize=False,
                          verbose_name='ID')),
        ('created_at', models.DateTimeField(auto_now_add=True)),
      ],
    ),
    migrations.CreateModel(
      name='RequestMessage',
      fields=[
        ('id',
         models.AutoField(auto_created=True, primary_key=True, serialize=False,
                          verbose_name='ID')),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('options',
         django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
        ('conversation',
         models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='moca.Conversation')),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='ResponseMessage',
      fields=[
        ('id',
         models.AutoField(auto_created=True, primary_key=True, serialize=False,
                          verbose_name='ID')),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('selection', models.IntegerField()),
        ('conversation',
         models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='moca.Conversation')),
        ('reply_to',
         models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='moca.RequestMessage')),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='TextMessage',
      fields=[
        ('id',
         models.AutoField(auto_created=True, primary_key=True, serialize=False,
                          verbose_name='ID')),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('text', models.TextField()),
        ('conversation',
         models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='moca.Conversation')),
      ],
      options={
        'abstract': False,
      },
    ),
    migrations.CreateModel(
      name='Patient',
      fields=[
        ('user_ptr',
         models.OneToOneField(on_delete=django.db.models.deletion.CASCADE,
                              primary_key=True,
                              serialize=False,
                              to=settings.AUTH_USER_MODEL)),
      ],
    ),
    migrations.CreateModel(
      name='Therapist',
      fields=[
        ('user_ptr',
         models.OneToOneField(on_delete=django.db.models.deletion.CASCADE,
                              primary_key=True,
                              serialize=False,
                              to=settings.AUTH_USER_MODEL)),
        ('bio', models.CharField(blank=True, max_length=200, null=True)),
        ('cert_date', models.DateField(blank=True, null=True)),
        ('operation_radius', models.IntegerField(default=10)),
        ('qualifications', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
        ('interests', models.CharField(blank=True, max_length=100, null=True)),
        ('status',
         models.CharField(choices=[('A', 'Available'), ('B', 'Busy')], default='A',
                          max_length=100)),
      ],
    ),
    migrations.AddField(
      model_name='textmessage',
      name='user',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                              to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='responsemessage',
      name='user',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                              to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='requestmessage',
      name='user',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                              to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='conversation',
      name='participants',
      field=models.ManyToManyField(related_name='participants', to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='attachmentmessage',
      name='conversation',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='moca.Conversation'),
    ),
    migrations.AddField(
      model_name='attachmentmessage',
      name='user',
      field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                              to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='address',
      name='user',
      field=models.ForeignKey(blank=True,
                              null=True,
                              on_delete=django.db.models.deletion.CASCADE,
                              related_name='addresses',
                              to=settings.AUTH_USER_MODEL),
    ),
    migrations.AddField(
      model_name='user',
      name='groups',
      field=models.ManyToManyField(
        blank=True,
        help_text=
        'The groups this user belongs to. A user will get all permissions granted to each of their groups.',
        related_name='user_set',
        related_query_name='user',
        to='auth.Group',
        verbose_name='groups'),
    ),
    migrations.AddField(
      model_name='user',
      name='user_permissions',
      field=models.ManyToManyField(blank=True,
                                   help_text='Specific permissions for this user.',
                                   related_name='user_set',
                                   related_query_name='user',
                                   to='auth.Permission',
                                   verbose_name='user permissions'),
    ),
  ]
